#!/usr/bin/env python3

import subprocess
from pathlib import Path
import shutil
import textwrap

# Base directory containing .xyz and existing .qro files on the HPC
ggeom_dir = Path("/gpfs1/home/m/o/momoniyi/CANDID/graves/CN/groundstateopt/98")

# Base output directory for ORCA runs
out_dir = ggeom_dir.parent / "orca_runs"
out_dir.mkdir(exist_ok=True)

# Central directories to collect files
qro_dir      = out_dir / "qro_files"
outfiles_dir = out_dir / "out_files"
gbw_dir      = out_dir / "gbw_files"
for d in (qro_dir, outfiles_dir, gbw_dir):
    d.mkdir(exist_ok=True)

# ORCA executable path
ORCA_CMD = "/gpfs1/sw/rh9/pkgs/orca/6.0.1/orca"

# Toggle SLURM submission
USE_SLURM = True

# Constants for charge and multiplicity
CHARGE       = 0
MULTIPLICITY = 2

SBATCH_TEMPLATE = textwrap.dedent("""\
#!/bin/bash
#SBATCH --job-name={stem}
#SBATCH --partition=general
#SBATCH --nodes=1
#SBATCH --ntasks=40
#SBATCH --cpus-per-task=1
#SBATCH --mem=400gb
#SBATCH --time=48:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=momoniyi@uvm.edu

module purge
module load gcc/13.3.0 openmpi/5.0.5 orca/6.0.1

{orca_cmd} {inp_name} > {stem}.out

mv *.qro {qro_dir}
mv *.out {outfiles_dir}
mv *.gbw {gbw_dir}
""")

INPUT_TEMPLATE = textwrap.dedent("""\
#CASSCF/TZVP Single Point of heme
! TZVP RIJCOSX AutoAux VeryTightSCF OPT
! moread
%moinp "{stem}.qro"

%scf
    Maxiter 500
end

%maxcore 400000

%pal
  nprocs 40
end

%casscf
  nel    9
  norb   8
  nroots 3
  mult   2
  trafostep rimo
  maxiter 500
  weights[0]=1,0,0
  orbstep superci
  switchstep diis
  shiftup 2.0
  shiftdn 2.0
end

%output
  print[p_mos]   true
  print[p_basis] 5
end

* xyzfile {charge} {mult} {geom_name}
""")

# Only these three stems now
GEOM_STEMS = ["0_61", "1_40", "1_09"]

def main():
    for stem in GEOM_STEMS:
        geom_name = f"{stem}.xyz"
        qro_name  = f"{stem}.qro"
        geom_src  = ggeom_dir / geom_name
        qro_src   = ggeom_dir / qro_name

        if not geom_src.exists():
            print(f"Missing geometry: {geom_src}")
            continue
        if not qro_src.exists():
            print(f"Missing QRO:       {qro_src}")
            continue

        job_dir = out_dir / stem
        job_dir.mkdir(exist_ok=True)

        shutil.copy(geom_src, job_dir / geom_name)
        shutil.copy(qro_src,  job_dir / qro_name)

        inp_name = f"{stem}.inp"
        with (job_dir / inp_name).open('w') as f:
            f.write(INPUT_TEMPLATE.format(
                stem=stem,
                charge=CHARGE,
                mult=MULTIPLICITY,
                geom_name=geom_name
            ))

        if USE_SLURM:
            sbatch_path = job_dir / "run.sh"
            with sbatch_path.open('w') as f:
                f.write(SBATCH_TEMPLATE.format(
                    stem=stem,
                    inp_name=inp_name,
                    orca_cmd=ORCA_CMD,
                    qro_dir=str(qro_dir),
                    outfiles_dir=str(outfiles_dir),
                    gbw_dir=str(gbw_dir)
                ))
            subprocess.run(["sbatch", str(sbatch_path)], cwd=job_dir)
        else:
            log_path = job_dir / f"{stem}.out"
            with log_path.open('w') as logf:
                subprocess.run([ORCA_CMD, str(job_dir / inp_name)],
                               cwd=job_dir, stdout=logf, check=True)
            for pattern, dest in [("*.qro", qro_dir), ("*.out", outfiles_dir), ("*.gbw", gbw_dir)]:
                for file in job_dir.glob(pattern):
                    file.replace(dest / file.name)

if __name__ == "__main__":
    main()
