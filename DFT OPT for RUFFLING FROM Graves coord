#!/usr/bin/env python3

import subprocess
from pathlib import Path
import shutil
import textwrap

# Base directory containing .xyz files on the HPC
ggeom_dir = Path("/gpfs1/home/m/o/momoniyi/CANDID/graves/CN/98")

# Base output directory for ORCA runs
out_dir = ggeom_dir / "orca_runs"
out_dir.mkdir(exist_ok=True)

# Central directories to collect files
outfiles_dir = out_dir / "out_files"
gbw_dir = out_dir / "gbw_files"
for d in (outfiles_dir, gbw_dir):
    d.mkdir(exist_ok=True)

# ORCA executable path
ORCA_CMD = "/gpfs1/sw/rh9/pkgs/orca/6.0.1/orca"

# Toggle SLURM submission: True to generate and submit sbatch scripts
USE_SLURM = True

# Constants for charge and multiplicity
CHARGE = 0
MULTIPLICITY = 2

# SLURM script template
SBATCH_TEMPLATE = textwrap.dedent("""\
#!/bin/bash
#SBATCH --job-name={stem}
#SBATCH --partition=general
#SBATCH --nodes=1
#SBATCH --ntasks=40
#SBATCH --cpus-per-task=1
#SBATCH --mem=400gb
#SBATCH --time=30:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=momoniyi@uvm.edu

module purge
module load gcc/13.3.0 openmpi/5.0.5 orca/6.0.1

{orca_cmd} {inp_name} > {stem}.out

mv *.out {outfiles_dir}
mv *.gbw {gbw_dir}
""")

# ORCA input template with updated Câ€“C constraints
INPUT_TEMPLATE = textwrap.dedent("""\
! UKS PBE TZVP TightSCF AutoAux RIJCOSX Opt

%scf
  MaxIter 500
end

%geom 
    coordsys    redundant    # primary coordinate system: redundant internals
    cartfallback true       # if a
    Constraints
  {{ C 5 C }}
  {{ C 6 C }}
  {{ C 7 C }}
  {{ C 8 C }}
  {{ C 9 C }}
  {{ C 10 C }}
  {{ C 11 C }}
  {{ C 12 C }}
  {{ C 15 C }}
  {{ C 16 C }}
  {{ C 17 C }}
  {{ C 18 C }}
  {{ C 22 C }}
  {{ C 23 C }}
  {{ C 24 C }}
  {{ C 25 C }}
  {{ C 29 C }}
  {{ C 30 C }}
  {{ C 31 C }}
  {{ C 32 C }}
  {{ C 35 C }}
  {{ C 36 C }}
  {{ C 37 C }}
  {{ C 38 C }}
    end
end

%maxcore 400000

%pal
  nprocs 40
end

* xyzfile {charge} {mult} {geom_name}
""")

# List your geometry stems here
GEOM_STEMS = [
    "0_40","0_47","0_54","0_61","0_68","0_75","0_82","0_88","0_94",
    "1_05","1_11","1_18","1_23","1_29","1_34","1_40","1_46","1_51",
    "1_56","1_62","1_66","1_71","1_76","1_81","1_85","1_90","1_94",
    "1_99","2_03","2_07","2_11","2_15","2_19","2_23","2_27","2_30"
]

def main():
    for stem in GEOM_STEMS:
        geom_name = f"{stem}.xyz"
        geom_src = ggeom_dir / geom_name
        if not geom_src.exists():
            print(f"Geometry file not found: {geom_src}")
            continue

        job_dir = out_dir / stem
        job_dir.mkdir(exist_ok=True)
        shutil.copy(geom_src, job_dir / geom_name)

        inp_name = f"{stem}.inp"
        inp_path = job_dir / inp_name
        with inp_path.open('w') as f:
            f.write(INPUT_TEMPLATE.format(
                charge=CHARGE,
                mult=MULTIPLICITY,
                geom_name=geom_name
            ))

        if USE_SLURM:
            sbatch_path = job_dir / "run.sh"
            with sbatch_path.open('w') as f:
                f.write(SBATCH_TEMPLATE.format(
                    stem=stem,
                    inp_name=inp_name,
                    orca_cmd=ORCA_CMD,
                    outfiles_dir=outfiles_dir,
                    gbw_dir=gbw_dir
                ))
            subprocess.run(["sbatch", str(sbatch_path)], cwd=job_dir)
        else:
            log_path = job_dir / f"{stem}.out"
            with log_path.open('w') as logf:
                subprocess.run(
                    [ORCA_CMD, str(inp_path)],
                    cwd=job_dir,
                    stdout=logf,
                    check=True
                )
            for pattern, dest in [("*.out", outfiles_dir), ("*.gbw", gbw_dir)]:
                for file in job_dir.glob(pattern):
                    file.replace(dest / file.name)

if __name__ == "__main__":
    main()
