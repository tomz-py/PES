#!/usr/bin/env python3

import subprocess
from pathlib import Path
import shutil
import textwrap

# Base directory containing .xyz and .gbw files on the HPC (NEVPT2 directory)
ggeom_dir = Path("/gpfs1/home/m/o/momoniyi/CANDID/graves/CN/98/NEVPT2")

# Base output directory for ORCA runs
out_dir = ggeom_dir / "orca_runs"
out_dir.mkdir(exist_ok=True)

# Central directories to collect files
qro_dir = out_dir / "qro_files"
outfiles_dir = out_dir / "out_files"
gbw_dir = out_dir / "gbw_files"
for d in (qro_dir, outfiles_dir, gbw_dir):
    d.mkdir(exist_ok=True)

# ORCA executable path
ORCA_CMD = "/gpfs1/sw/rh9/pkgs/orca/6.0.1/orca"

# Toggle SLURM submission: True to generate and submit sbatch scripts
USE_SLURM = True

# Constants for charge and multiplicity
CHARGE = 0
MULTIPLICITY = 2

# SLURM script template
SBATCH_TEMPLATE = textwrap.dedent("""\
#!/bin/bash
#SBATCH --job-name={stem}
#SBATCH --partition=general
#SBATCH --nodes=1
#SBATCH --ntasks=40
#SBATCH --cpus-per-task=1
#SBATCH --mem=400gb
#SBATCH --time=30:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=momoniyi@uvm.edu

module purge
module load gcc/13.3.0 openmpi/5.0.5 orca/6.0.1

{orca_cmd} {inp_name} > {stem}.out

mv *.qro {qro_dir}
mv *.out {outfiles_dir}
mv *.gbw {gbw_dir}
""")

# Updated ORCA input template for NEVPT2 single-point
INPUT_TEMPLATE = textwrap.dedent("""\
#CASSCF/TZVP Single Point of heme-CN
! NEVPT2 TZVP RIJCOSX AutoAux TightSCF
! moread
%moinp "{gbw_name}"

%maxcore 400000

%pal
  nprocs 40
end

%casscf
  nel    9
  norb   9
  nroots 3
  mult   2
  trafostep rimo
  maxiter 100
  PTSettings
        canonstep 0 
    end
end

%output
  print[p_mos] true
  print[p_basis] 5
end
* xyzfile {charge} {mult} {geom_name}
""")

# Geometry stems (identifiers for both .xyz and prefixed .gbw files)
GEOM_STEMS = [
    "0_40","0_47","0_54","0_61","0_68","0_75","0_82","0_88","0_94",
    "1_05","1_11","1_18","1_23","1_29","1_34","1_40","1_46","1_51",
    "1_56","1_62","1_66","1_71","1_76","1_81","1_85","1_90","1_94",
    "1_99","2_03","2_07","2_11","2_15","2_19","2_23","2_27","2_30"
]

def main():
    for stem in GEOM_STEMS:
        xyz_name = f"{stem}.xyz"
        gbw_name = f"c{stem}.gbw"              # look for the “c”-prefixed file
        xyz_src = ggeom_dir / xyz_name
        gbw_src = ggeom_dir / gbw_name

        if not xyz_src.exists():
            print(f"XYZ file not found: {xyz_src}")
            continue
        if not gbw_src.exists():
            print(f"GBW file not found: {gbw_src}")
            continue

        # Create job-specific directory
        job_dir = out_dir / stem
        job_dir.mkdir(exist_ok=True)

        # Copy geometry and gbw files into job directory
        shutil.copy(xyz_src, job_dir / xyz_name)
        shutil.copy(gbw_src, job_dir / gbw_name)

        # Write ORCA input
        inp_name = f"{stem}.inp"
        inp_path = job_dir / inp_name
        with inp_path.open('w') as f:
            f.write(
                INPUT_TEMPLATE.format(
                    gbw_name=gbw_name,
                    charge=CHARGE,
                    mult=MULTIPLICITY,
                    geom_name=xyz_name
                )
            )

        if USE_SLURM:
            # Create and submit SLURM script
            sbatch_path = job_dir / "run.sh"
            with sbatch_path.open('w') as f:
                f.write(
                    SBATCH_TEMPLATE.format(
                        stem=stem,
                        inp_name=inp_name,
                        orca_cmd=ORCA_CMD,
                        qro_dir=str(qro_dir),
                        outfiles_dir=str(outfiles_dir),
                        gbw_dir=str(gbw_dir)
                    )
                )
            subprocess.run(["sbatch", str(sbatch_path)], cwd=job_dir)
        else:
            # Run ORCA directly and collect files
            with (job_dir / f"{stem}.out").open('w') as logf:
                subprocess.run([ORCA_CMD, str(inp_path)], cwd=job_dir, stdout=logf, check=True)
            for pattern, dest in [("*.qro", qro_dir), ("*.out", outfiles_dir), ("*.gbw", gbw_dir)]:
                for file in job_dir.glob(pattern):
                    file.replace(dest / file.name)

if __name__ == "__main__":
    main()
