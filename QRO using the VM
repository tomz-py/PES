#!/usr/bin/env python3

import subprocess
from pathlib import Path
import shutil
import textwrap

# === Configuration ===

# Path to the directory containing input XYZ files
ggeom_dir = Path("/users/m/o/momoniyi/CANDID/OPT/N3/10_steps/QRO")

# Path to ORCA executable on your VM
ORCA_CMD = Path.home() / "bin/orca/orca"

# Charge and multiplicity
CHARGE = 0
MULTIPLICITY = 2

# Output structure
out_dir = ggeom_dir / "orca_runs"
qro_dir = out_dir / "qro_files"
out_dir.mkdir(exist_ok=True)
qro_dir.mkdir(exist_ok=True)

# ORCA input template
INPUT_TEMPLATE = textwrap.dedent("""\
! UKS BLYP TZVP RIJCOSX TightSCF

%MaxCore 700000

%scf
  MaxIter 500
  UHFNO true
end

%pal
  nprocs 45
end

%output
  Print[ P_Loewdin ] 1
  Print[ P_ReducedOrbPopMO_L] 1
  Print[ P_UNO_ReducedOrbPopMO_L] 1
end

%plots
  Format gOpenMol_bin
  dim1 50
  dim2 50
  dim3 50
  SpinDens("HemeN3.spin.plt");
end

* xyzfile {charge} {mult} {geom_name}
""")

# === Execution Logic ===

def main():
    for i in range(1, 11):  # From HemeN3.001 to HemeN3.010
        stem = f"HemeN3.{i:03d}"
        geom_src = ggeom_dir / f"{stem}.xyz"
        if not geom_src.exists():
            print(f"[WARNING] Missing: {geom_src}")
            continue

        # Create job-specific folder
        job_dir = out_dir / stem
        job_dir.mkdir(exist_ok=True)

        # Copy geometry file to job folder
        shutil.copy(geom_src, job_dir / f"{stem}.xyz")

        # Generate ORCA input file
        inp_path = job_dir / f"{stem}.inp"
        with inp_path.open("w") as f:
            f.write(INPUT_TEMPLATE.format(
                charge=CHARGE,
                mult=MULTIPLICITY,
                geom_name=f"{stem}.xyz"
            ))

        # Run ORCA using redirection (inp > out)
        out_path = job_dir / f"{stem}.out"
        with out_path.open("w") as out_file:
            subprocess.run(
                [str(ORCA_CMD), str(inp_path)],
                cwd=job_dir,
                stdout=out_file,
                stderr=subprocess.STDOUT,
                check=True
            )

        # Move all .qro files to central folder
        for qro in job_dir.glob("*.qro"):
            qro.replace(qro_dir / qro.name)

        print(f"[INFO] Completed: {stem}")

if __name__ == "__main__":
    main()
